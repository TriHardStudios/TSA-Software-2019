// Accept function pointer, elapse time, accept start time
// property struct generated by passed stuff
// Manage queue

// Actually run the functions with the function pointers
// Deploy threads

struct Task {
    Task();

// Teh pointer to the function
    void *function;
    // Stores the cycles of the processor that the function will run for
    int cycles;
    // Optional, for set start times of the function
    int start;
};


class TaskScheduler {
private:
    int Cycles;
    int Start;
    void *Function;
    double CPU_GHz = 0;
    int taskNumber = 0;
    bool Run = true;
public:
    // Gets the function pointer, elapse time and start time if applicable
    void addTask(int, int, void*);
    void configCPUClock(double);

    // Stops a thread
    void terminateThread();
private:
    // Makes a structure from the passed information
    int createTask();
    // Runs the threads with an infinite loop checking the queue and executing threads
    void threadRun();
    // Checks queue to see if there is space for any threads
    int assesQueue(Task);
};