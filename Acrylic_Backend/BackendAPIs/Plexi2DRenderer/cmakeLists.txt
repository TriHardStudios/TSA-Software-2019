#Plexi2DRenderer
cmake_minimum_required(VERSION 3.13)

project(Plexi2DRenderer)

set(CMAKE_CXX_STANDARD 17)

#set(VULKAN_SOURCE PlexiBackend/PlexiBackend_Vulkan/vulkanMain.cpp PlexiBackend/PlexiBackend_Vulkan/VulkanHelpers/Creators/GraphicsPiplines.cpp)
#set(VULKAN_HEADER PlexiBackend/PlexiBackend_Vulkan/VulkanHelpers/queueFamilies.hpp PlexiBackend/PlexiBackend_Vulkan/VulkanHelpers/swapChains.hpp PlexiBackend/PlexiBackend_Vulkan/VulkanHelpers/validationLayers.hpp)

set(OPENGL_SOURCE ./PlexiBackend/PlexiBackend_OpenGL/OpenGLMain.cpp ./PlexiBackend/PlexiBackend_OpenGL/OpenGLShader.cpp ./PlexiBackend/PlexiBackend_OpenGL/OpenGL2DTexture.cpp)
set(OPENGL_HEADER ./PlexiBackend/PlexiBackend_OpenGL/OpenGLMain.hpp ./PlexiBackend/PlexiBackend_OpenGL/OpenGL2DTexture.hpp)


set(SOURCE_FILES ${OPENGL_SOURCE} acrylic_plexiRenderer.cpp PlexiBackend/plexiShaders.cpp PlexiBackend/plexiTexture.cpp)
set(HEADER_FILES ${OPENGL_HEADER} ./PlexiBackend/acrylic_plexiBackend.hpp ./PlexiBackend/plexiHelper.hpp acrylic_plexiRenderer.hpp plexi_usrStructs.hpp acrylic_plexiRenderer_core.hpp PlexiBackend/plexiShaders.hpp PlexiBackend/plexiBuffer.hpp PlexiBackend/plexiTexture.hpp)



set(TST_FILES main.nfp.cpp)

#include TriHard Studios Helper Libs
add_subdirectory(./../BackendAPIs/required/trihardstudios thsBuild)
include_directories(./../BackendAPIs/required/trihardstudios/include)

#Include Glad (OpenGL Loader)
include_directories(./GraphicsAPIs/required/glad/include)
set(GLAD_SOURCE ./GraphicsAPIs/required/glad/src/glad.c)

#Include GLM
include_directories(./GraphicsAPIs/required/glm/include)

#Include GLFW3
include_directories(./../BackendAPIs/required/GLFW3/include)
#Enable GLFW3 Default Linking and disable documentation and tests
set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
#Add it as a sub project to be built
add_subdirectory(./../BackendAPIs/required/GLFW3 glfw3Build)


if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    add_compile_definitions(MACOS)

elseif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    #Disable MSVC Bullshit
    SET( CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS} "/NODEFAULTLIBS:LIBCMT" )
    SET( CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS} "/NODEFAULTLIBS:MSVCRT" )
    SET( CMAKE_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS} "/NODEFAULTLIBS:MSVCPRTD" )

    add_compile_definitions(WINDOWS)

elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    message(AUTHOR_WARNING "Building on Linux has not been tested. Please use macOS or Windows to build")

    add_compile_definitions(LINUX)

else()
    message(FATAL_ERROR "Unable to detect operating system. Build halted")
endif()

#Build Dependencies
add_library(glad STATIC ${GLAD_SOURCE})

#Disable GLFW includes
add_compile_definitions(GLFW_INCLUDE_NONE)

add_library(Plexi2DRenderer STATIC ${SOURCE_FILES} ${HEADER_FILES})
add_executable(PlexiTester1000 ${TST_FILES})


#Link Plexi with libs
target_link_libraries(Plexi2DRenderer glfw)
target_link_libraries(Plexi2DRenderer glad)
target_link_libraries(Plexi2DRenderer A2D_log)

#Link Tester with Plexi
target_link_libraries(PlexiTester1000 Plexi2DRenderer)